____________________SETUP-Django&Git____________________
python -m venv myvenv
myvenv\Scripts\activate
python -m pip install --upgrade pip
python -m pip install -r requirements.txt
django-admin startproject mysite .

1.Git SetUp --Initial
	
	add git-ignore file
	
	git init
	git status
	git config user.name "ajmalrashadmarkz"
	git config user.email "ajmalrashadmarkz@gmail.com"
	git add --
	git commit -m "Base Django Files"
	git branch
	git remote add origin https://github.com/-----------------------------------------
	git push -u origin master // git push

	Git Branch Renaming
	    -git branch -m 01_Blog_Posting


2.Git - Create a New Branch
	git checkout -b 01_setup_model


____________________Django-Setup____________________

3.Changing settings
	TIME_ZONE = 'Asia/Calcutta'
	LANGUAGE_CODE = 'en-us'
	ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

			DB-Setup
4.create a database
	python manage.py migrate

5.Starting the web server
	python manage.py runserver 9000

____________________Django models____________________
6.Objects
	6.1 Creating an application
		python manage.py startapp blog

	6.2 Add application in INSTALLED_APPS
		INSTALLED_APPS = [
			'blog',
		]
	6.3 Creating a blog post model
	    -define all objects
	    -from or import are lines that add some bits from other files.
	    -class is a special keyword - defining an object.
	    -Name of our model. Always start a class name with an uppercase letter.
	    -Define the properties
	    -Define function/method

	6.4 Create tables for models in your database
	    -add our new model to our database
	        python manage.py makemigrations blog
	    -prepared a migration file - apply to our database.
	        python manage.py migrate blog


____________________Django Admin____________________
7.Admin Panel
    7.1 Register the model with admin.site.register()
        -add, edit and delete the data - we will use Django admin.
        -blog/admin.py
            -import model
            -register
    7.2 create a superuser
        -python manage.py createsuperuser

8. URL - redirection [project]
    8.1 import include from django.urls
    8.2 add  path('', include('')) in urlpatterns = [ ]

9. URL - redirection [Application]
    9.1 Create a new empty file named urls.py in the ___________ directory
    9.2  importing Djago function [path] and [views] from the application

10. Django views
    10.1 created a function (def) called ________ that takes request and will return the value it gets from calling
    another function render that will render (put together) our template

11. Creating a template
    11.1 creating a template file
         -[create a directory called templates inside your blog directory]
    11.2 create another directory called ________ inside your templates directory
         -[Useful naming convention]
    11.3 create a ________.html file

12. Pull your new code down to PythonAnywhere
    12.1 Not Working
    12.2 Video Reference in Resources Folder

____________________Django ORM and QuerySets____________________

13. Create  post
    13.1 Open the shell [Django's interactive console]
         -python manage.py shell
    13.2 Display all of our posts first
          -[ import the model _____ from ______.models]
          -from blog.models import Post
    13.3 List of the posts
         -________.objects.all()
         -Post.objects.all()
    13.4  import User model
          -from django.contrib.auth.models import User
    13.5 users - in our database
          -User.objects.all()
    13.6 Assign me[me - identifier] as user
         -me = User.objects.get(username='__user__')
    13.7 Create post
         -Post.objects.create(author=me, title='Sample title', text='Test')

14. Filter objects
    14.1 find all posts that user admin[as user] authored
         -Post.objects.filter(author=me)
    14.2 find all the posts contain 'title' in the title field?
         -Post.objects.filter(title__contains='title')
    14.3 filtering all the posts that have published_date
         -import timezone
            -from django.utils import timezone
         - Post.objects.filter(published_date__lte=timezone.now())

15.  Publish Post Using  publish method
    15.1 define post[identifier]
           -post = Post.objects.get(title="Sample title 2")
    15.2 post.publish()

16. Ordering objects
    - QuerySets also allow you to order the list of objects
    16.1 order post by created_date field:
        - Post.objects.order_by('created_date')
    16.2 order the list by reverse manner [by adding -]
        - Post.objects.order_by('-created_date')

17. Complex queries through method-chaining
    - Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')

18. Close the shell
    - exit()

____________________Dynamic data in templates____________________

- views - connect models and templates
- view we will need to take the models we want to display and pass them to the template

19.1 Include the model in to view.py
    - from .models import ________
    - from .models import Post

19.2 QuerySet [blog posts sorted by published_date] - create a variable for our QuerySet
    - Import  timezone [ from django.utils import timezone ]
    - variable = ____.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    - posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')

19.3 Set  parameter for render model data
    - return render(request, 'blog/post_list.html', {'______' : _______ })
    - return render(request, 'blog/post_list.html', {'posts': posts})

____________________Django templates____________________

- Built-in template tags
- To transfer Python-like things into HTML

20 Display post list template
    20.1 Open Up
          - blog -> templates -> blog -> post_list.html
    20.2 Check if Django understand list of objects or not.
          - {{ ------- }} [------ = in this variable defined at views, like sorted Query set]
          - {{ posts }} [posts variable we can seen at views]
    20.3 Set up the loops
          -
          - {% for post in posts %}
                {{ post }}
            {% endfor %}
    20.4 mix HTML and template tags
          -
          - {% for post in posts %}
                <article>
                    <time>published: {{ post.published_date }}</time>
                    <h2><a href="">{{ post.title }}</a></h2>
                     <p>{{ post.text|linebreaksbr }}</p>
                </article>
            {% endfor %}

____________________Deploying to PythonAnywhere [Pull from Git]____________________

- Move the Code into pothonanywhere

21 Open Up New Console

    21.1 git clone
        21.1.1 Creating a personal access token
            - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
            - Password : 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
        21.1.2 git clone https://github.com/ajmalrashadmarkz/Django_markcreative_08_2022

    21.2  Setup virtual env
        - virtualenv --python=python3.8 myvenv [Django girl site]
        - mkvirtualenv —python=/usr/bin/python3.8 myenv [Ref Video]

    21.3 virtual environment by Activating
        - source myvenv/bin/activate

    21.4 Install django
        - python -m pip install --upgrade pip

    21.5 python -m pip install -r requirements.txt

    21.6  open -> pythonanywhere -> Web -> Add a new web app
        21.6.1  Manual configuration (including virtualenvs) -> 3.8
        21.6.2 Setup Virtualenv [ using previously name ]
        21.6.3 Edit -> WSGI configuration file -> Open in new window
                - Remove everything except our particular framework
                - Remove commented # of django code
                - Edit the path
                    open Bash console
                    move back directory
                    using pwd comment we get path
                    add into path = ''
                -Edit Setting Module
                    Add the project Name [important]
                - Save the file
        21.6.4 Goto -> Web
                - Press The Reload Button
                - Go to the link

        21.6.5 Update ALLOWED HOSTS List in project folder -> Settings
                - Give our website address
                - Add STATIC ROOT
                    STATIC_ROOT = '/home/markcreative/Django_markcreative_08_2022/static'
                - Open Bash Console
                    - python manage.py collectstatic
                - Add -> web
                    - URL ->  /static/
                    - Directory    -> /home/markcreative/Django_markcreative_08_2022/static


____________________   CSS – make it pretty!   ____________________

 22. Use Bootstrap
        22.1 Install Bootstrap
            - project -> templates -> folder -> _______.html
            - add this code into the <head> section:
                - <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

        22.2 Static files in Django
            - Static files are all your CSS and images
            - Creating a folder called static inside the blog app
            - Create a new directory called css inside your static directory
            - Create a new file called blog.css inside this css directory
            -
                markcreative
                       └─── blog
                                └─── static
                                          └─── css
                                                 └───blog.css
            -Added CSS in HTML template
                - blog/templates/blog/post_list.html
                - Add the line at the very beginning
                    - {% load static %}
                - add this line:
                    - Between the <head> and </head> tags
                    - <link rel="stylesheet" href="{% static 'css/blog.css' %}">

